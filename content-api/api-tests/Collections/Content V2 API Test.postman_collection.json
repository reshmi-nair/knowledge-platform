{
	"info": {
		"_postman_id": "ec007894-70ee-4951-8e96-98f79de5908a",
		"name": "Content V2 API Test",
		"description": "The Content Management APIs allow you to create, manage and process content on the Sunbird platform. Content is the basic building block of the Knowledge Service. Some examples would be Videos, Audio, Pdfs, Html, ECML etc. The basic operations for this API include Create, Update, Read, Review, Publish.\n\nThe URL for Content Management API(s) is /content/v1.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Content Create ",
					"item": [
						{
							"name": "200 - With minimal required attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
											"});",
											"pm.test(\"ver should be 4.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "200 - With identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"id should be api.content.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
											"});",
											"pm.test(\"ver should be 4.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"// Result",
											"pm.test(`identifier should be equal to ${JSON.parse(request.data).request.content.identifier}`, () => {",
											"    pm.expect(jsonResponse.result.identifier).to.eql(`${JSON.parse(request.data).request.content.identifier}`);",
											"});",
											"pm.test(`node_id should be equal to ${JSON.parse(request.data).request.content.identifier}`, () => {",
											"    pm.expect(jsonResponse.result.node_id).to.eql(`${JSON.parse(request.data).request.content.identifier}`);",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"identifier\": \"some_identifier\",\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "200 - With external fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
											"});",
											"pm.test(\"ver should be 4.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "200 - Special character in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
											"});",
											"pm.test(\"ver should be 4.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"~`S!@#$%^&*()_+=:;\\\"'<,>.?/\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "Content Read",
					"item": [
						{
							"name": "200 - Get all data except external data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('content');",
											"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
											"  pm.expect(jsonResponse.result.content).to.have.any.keys('identifier', 'versionKey', 'code', 'channel', 'mimeType', 'createdOn', 'primaryCategory', 'contentDisposition', 'contentEncoding', 'objectType', 'visibility', 'discussionForum', 'license', 'version', 'compatibilityLevel', 'name', 'status');",
											"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.content.versionKey).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.content.version).to.be.a(\"number\");",
											"  pm.expect(jsonResponse.result.content.channel).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.a(\"number\");",
											"  pm.expect(jsonResponse.result.content.ownershipType).to.be.an(\"array\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.read\", () => {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
											"});",
											"pm.test(\"ver should be 4.0\", () => {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"pm.test(`identifier should be equal to ${pm.globals.get(\"content_id\")}`, () => {",
											"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											"pm.test(\"objectType should be Content\", () => {",
											"    pm.expect(jsonResponse.result.content.objectType).to.eql(\"Content\");",
											"});",
											"pm.test(\"visibility should be Default\", () => {",
											"    pm.expect(jsonResponse.result.content.visibility).to.eql(\"Default\");",
											"});",
											"pm.test(\"compatibilityLevel should be 1\", () => {",
											"    pm.expect(jsonResponse.result.content.compatibilityLevel).to.eql(1);",
											"});",
											"pm.test(\"status should be Draft\", () => {",
											"    pm.expect(jsonResponse.result.content.status).to.eql(\"Draft\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.globals.set('content_id', '');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/content/v2/read/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"read",
										"{{content_id}}"
									]
								},
								"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "200 - Get specific attributes by sending fields query params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('content');",
											"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
											"  pm.expect(jsonResponse.result.content).to.have.all.keys('identifier', 'primaryCategory', 'name', 'languageCode');",
											"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.content.versionKey).to.be.undefined;",
											"  pm.expect(jsonResponse.result.content.version).to.be.undefined;",
											"  pm.expect(jsonResponse.result.content.channel).to.be.undefined;",
											"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.undefined;",
											"  pm.expect(jsonResponse.result.content.languageCode).to.be.an(\"array\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.read\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
											"});",
											"pm.test(\"ver should be 4.0\", () => {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"pm.test(`identifier should be equal to ${pm.globals.get(\"content_id\")}`, () => {",
											"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.globals.set('content_id', '');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/content/v2/read/{{content_id}}?fields=name,primaryCategory,body",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"read",
										"{{content_id}}"
									],
									"query": [
										{
											"key": "fields",
											"value": "name,primaryCategory,body",
											"description": "Fields param is used to get the external data in response, by default read API doesn't return external data. Also fields can be used to get the specific data only in response instead of getting all the data."
										}
									]
								},
								"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Content Update",
					"item": [
						{
							"name": "200 - Update existing data or add new data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.update\", () => {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
											"});",
											"pm.test(\"ver should be 4.0\", () => {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), () => {",
											"    pm.expect(jsonResponse.result.identifier).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											"pm.test(\"node_id should be equal to \" + pm.globals.get(\"content_id\"), () => {",
											"    pm.expect(jsonResponse.result.node_id).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.globals.set('content_id');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"description\": \"dsd\",\n            \"resourceType\": \"Learn\",\n            \"framework\": \"ekstep_ncert_k-12\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "200 - Special character in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.update\", () => {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
											"});",
											"pm.test(\"ver should be 4.0\", () => {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"",
											"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), () => {",
											"    pm.expect(jsonResponse.result.identifier).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											"pm.test(\"node_id should be equal to \" + pm.globals.get(\"content_id\"), () => {",
											"    pm.expect(jsonResponse.result.node_id).to.eql(pm.globals.get(\"content_id\"));",
											"});",
											"",
											"// Set global variable",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"description\": \"dsd\",\n            \"name\": \"~`S!@#$%^&*()_+=:;\\\"'<,>.?/\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Content Reserve DIAL  code",
					"item": [
						{
							"name": "Collection Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200)",
											"});",
											"pm.test(\"Content-Type header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
											"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
											"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.msgid).to.be.null;",
											"  pm.expect(jsonResponse.params.err).to.be.null;",
											"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
											"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
											"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.content.create\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
											"});",
											"pm.test(\"ver should be 4.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"pm.test(\"params.status should be successful\", function () {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
											"});",
											"pm.test(\"responseCode should be OK\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
											"});",
											"",
											"// Set global variable",
											"pm.environment.set(\"collection_id\", jsonResponse.result.identifier);",
											"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"description": "Represents the authorized User ID to execute the API."
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text",
										"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Sample Collection\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.content-collection\",\n            \"primaryCategory\": \"Digital Textbook\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
							},
							"response": [
								{
									"name": "Content Create - 200 OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 19 Jul 2022 06:42:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "X-RateLimit-Limit-hour",
											"value": "1000000"
										},
										{
											"key": "X-RateLimit-Remaining-hour",
											"value": "999995"
										},
										{
											"key": "request-time",
											"value": "34"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "36"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "40"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "41"
										},
										{
											"key": "Via",
											"value": "kong/0.14.1"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
								},
								{
									"name": "Content Create - 400 Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 19 Jul 2022 06:28:26 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "297"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-RateLimit-Limit-hour",
											"value": "1000000"
										},
										{
											"key": "X-RateLimit-Remaining-hour",
											"value": "999998"
										},
										{
											"key": "request-time",
											"value": "11"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "13"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "18"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "125"
										},
										{
											"key": "Via",
											"value": "kong/0.14.1"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
								},
								{
									"name": "Content Create - 404 Not Found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 19 Jul 2022 06:33:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "X-RateLimit-Limit-hour",
											"value": "1000000"
										},
										{
											"key": "X-RateLimit-Remaining-hour",
											"value": "999997"
										},
										{
											"key": "request-time",
											"value": "16"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "18"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "23"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "115"
										},
										{
											"key": "Via",
											"value": "kong/0.14.1"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
								}
							]
						},
						{
							"name": "Reserve DIAL code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Multiple scenarios handled at one place",
											"pm.test(\"Response contains DIAL code\", function () {",
											"    const responseJson = pm.response.json();",
											"    var req = JSON.parse(request.data);",
											"    if(req.request.dialcodes.count > 1000){",
											"        pm.response.to.have.status(403);",
											"    } else {",
											"        const reservedDialcodes = responseJson.result.reservedDialcodes;",
											"        pm.expect(reservedDialcodes).not.null",
											"        _.forEach(JSON.parse(reservedDialcodes), function(value, key) {",
											"            const oldDialcode = pm.globals.get(\"new_dialcode\")",
											"            pm.globals.set(\"replaced_dialcode\", oldDialcode);",
											"            pm.globals.set(\"new_dialcode\", key);",
											"        });",
											"        console.log(pm.globals.get(\"replaced_dialcode\")); ",
											"        console.log(pm.globals.get(\"new_dialcode\"));",
											"    }",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 3,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Reserved DIAL code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Multiple scenarios handled at one place",
											"pm.test(\"Response contains DIAL code\", function () {",
											"    const responseJson = pm.response.json();",
											"    var req = JSON.parse(request.data);",
											"    if(req.request.dialcodes.count > 1000){",
											"        pm.response.to.have.status(403);",
											"    } else {",
											"        const reservedDialcodes = responseJson.result.reservedDialcodes;",
											"        pm.expect(reservedDialcodes).not.null",
											"    }",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 5,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reserve DIAL codes without qr spec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Multiple scenarios handled at one place",
											"pm.test(\"Response contains DIAL code\", function () {",
											"    const responseJson = pm.response.json();",
											"    var req = JSON.parse(request.data);",
											"    if(req.request.dialcodes.count > 1000){",
											"        pm.response.to.have.status(403);",
											"    } else {",
											"        const reservedDialcodes = responseJson.result.reservedDialcodes;",
											"        pm.expect(reservedDialcodes).not.null",
											"    }",
											"  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 7\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Content/Collection Reserve DIAL code APIs allow you to reserve DIAL codes to a content/collection on the Sunbird platform. Reserve DAIL code API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Reserve DIAL code API(s) are /content/v2/dialcode/reserve and /collection/v1/dialcode/reserve."
				},
				{
					"name": "Content Link DIAL code",
					"item": [
						{
							"name": "Link DIAL code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": [{\n            \"identifier\": [\"{{collection_id}}\"],\n            \"dialcode\": [\"{{new_dialcode}}\"]\n        }]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/link/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"link",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update linked DIAL code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": [{\n            \"identifier\": [\"{{collection_id}}\"],\n            \"dialcode\": [\"{{replaced_dialcode}}\"]\n        }]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/link/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"link",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Content/Collection Link DIAL code APIs allow you to link DIAL codes to content/collection/collection units on the Sunbird platform. Reserve DAIL code API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Link DIAL code API(s) are /content/v2/dialcode/link and /collection/v1/dialcode/link."
				},
				{
					"name": "Content Publish API",
					"item": [
						{
							"name": "Pre-requisite",
							"item": [
								{
									"name": "Collection Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.environment.set(\"collection_id\", jsonResponse.result.identifier);",
													"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Sample Collection\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.content-collection\",\n            \"primaryCategory\": \"Digital Textbook\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "TOC Upload",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "fileUrl",
													"value": "https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/hierarchy/do_113316820811522048194/createtoc.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/collection/v1/import/{{collection_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"collection",
												"v1",
												"import",
												"{{collection_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDF Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"pdf_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/assets/do_2136088747812372481510/samplepdf.pdf\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "MP4 Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"mp4_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/assets/do_21360643694649344011752/draftversion.mp4\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "WEBM Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"webm_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/webm\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/assets/do_21360604894303027211507/big-buck-bunny_trailer.webm\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "HTML Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"html_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.html-archive\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/do_21357841995316428811795/artifact/2.-ekiikrnn-kii-prkrti-output-3_1657521986480_1657522093104.zip\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "H5P Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"h5p_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/do_2136088263163084801476/artifact/1661233685237_do_2136088263163084801476.zip\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "ECML Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"ecml_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.ecml-archive\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"theme\\\":{\\\"id\\\":\\\"theme\\\",\\\"version\\\":\\\"1.0\\\",\\\"startStage\\\":\\\"463caa09-b78e-412c-ae20-a2776c76b4a0\\\",\\\"stage\\\":[{\\\"x\\\":0,\\\"y\\\":0,\\\"w\\\":100,\\\"h\\\":100,\\\"id\\\":\\\"463caa09-b78e-412c-ae20-a2776c76b4a0\\\",\\\"rotate\\\":null,\\\"config\\\":{\\\"__cdata\\\":\\\"{\\\\\\\"opacity\\\\\\\":100,\\\\\\\"strokeWidth\\\\\\\":1,\\\\\\\"stroke\\\\\\\":\\\\\\\"rgba(255, 255, 255, 0)\\\\\\\",\\\\\\\"autoplay\\\\\\\":false,\\\\\\\"visible\\\\\\\":true,\\\\\\\"color\\\\\\\":\\\\\\\"#FFFFFF\\\\\\\",\\\\\\\"genieControls\\\\\\\":false,\\\\\\\"instructions\\\\\\\":\\\\\\\"\\\\\\\"}\\\"},\\\"manifest\\\":{\\\"media\\\":[]},\\\"shape\\\":[{\\\"type\\\":\\\"ellipse\\\",\\\"x\\\":15,\\\"y\\\":15,\\\"fill\\\":\\\"#00FF00\\\",\\\"w\\\":18,\\\"h\\\":32,\\\"stroke\\\":\\\"rgba(255, 255, 255, 0)\\\",\\\"strokeWidth\\\":1,\\\"opacity\\\":1,\\\"rotate\\\":0,\\\"r\\\":64.8,\\\"z-index\\\":0,\\\"id\\\":\\\"7e35536a-1e50-4ada-872e-416b04da61a0\\\",\\\"config\\\":{\\\"__cdata\\\":\\\"{\\\\\\\"opacity\\\\\\\":100,\\\\\\\"strokeWidth\\\\\\\":1,\\\\\\\"stroke\\\\\\\":\\\\\\\"rgba(255, 255, 255, 0)\\\\\\\",\\\\\\\"autoplay\\\\\\\":false,\\\\\\\"visible\\\\\\\":true,\\\\\\\"color\\\\\\\":\\\\\\\"#00FF00\\\\\\\",\\\\\\\"radius\\\\\\\":64.8}\\\"}}]}],\\\"manifest\\\":{\\\"media\\\":[{\\\"id\\\":\\\"d91cc898-8885-4642-9e55-d16bd502d946\\\",\\\"plugin\\\":\\\"org.ekstep.navigation\\\",\\\"ver\\\":\\\"1.0\\\",\\\"src\\\":\\\"/content-plugins/org.ekstep.navigation-1.0/renderer/controller/navigation_ctrl.js\\\",\\\"type\\\":\\\"js\\\"},{\\\"id\\\":\\\"e02a792e-b75e-4eea-bae0-58666a4ee5c2\\\",\\\"plugin\\\":\\\"org.ekstep.navigation\\\",\\\"ver\\\":\\\"1.0\\\",\\\"src\\\":\\\"/content-plugins/org.ekstep.navigation-1.0/renderer/templates/navigation.html\\\",\\\"type\\\":\\\"js\\\"},{\\\"id\\\":\\\"org.ekstep.navigation\\\",\\\"plugin\\\":\\\"org.ekstep.navigation\\\",\\\"ver\\\":\\\"1.0\\\",\\\"src\\\":\\\"/content-plugins/org.ekstep.navigation-1.0/renderer/plugin.js\\\",\\\"type\\\":\\\"plugin\\\"},{\\\"id\\\":\\\"org.ekstep.navigation_manifest\\\",\\\"plugin\\\":\\\"org.ekstep.navigation\\\",\\\"ver\\\":\\\"1.0\\\",\\\"src\\\":\\\"/content-plugins/org.ekstep.navigation-1.0/manifest.json\\\",\\\"type\\\":\\\"json\\\"}]},\\\"plugin-manifest\\\":{\\\"plugin\\\":[{\\\"id\\\":\\\"org.ekstep.navigation\\\",\\\"ver\\\":\\\"1.0\\\",\\\"type\\\":\\\"plugin\\\",\\\"depends\\\":\\\"\\\"}]},\\\"compatibilityVersion\\\":2}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "EPUB Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"epub_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/epub\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://sunbirdstagingpublic.blob.core.windows.net/sunbird-content-staging/content/assets/do_2136085231556526081377/faulkner-sound-and-the-fury.epub\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "Youtube Content Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"yt_content_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/x-youtube\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://www.youtube.com/watch?v=fkLcI4R7unE\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "Plugin Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"plugin_id\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"org.ekstep.summary-test\",\n            \"mimeType\": \"application/vnd.ekstep.plugin-archive\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"artifactUrl\": \"https://ntpproductionall.blob.core.windows.net/ntp-content-production/content/org.ekstep.summary/artifact/org.ekstep.summary-1.0-1_1574060894628.zip\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Test Cases",
							"item": [
								{
									"name": "Collection Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/collection/v1/publish/{{collection_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"collection",
												"v1",
												"publish",
												"{{collection_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDF Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{pdf_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{pdf_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "MP4 Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{mp4_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{mp4_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WEBM Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{webm_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{webm_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HTML Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{html_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{html_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "H5P Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{h5p_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{h5p_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "EPUB Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{epub_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{epub_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ECML Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{ecml_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{ecml_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Youtube Content Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{yt_content_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{yt_content_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Plugin Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{plugin_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{plugin_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "The Content/Collection Publish APIs allow you to publish content/collection on the Sunbird platform. Publish API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Publish API(s) are /content/v2/publish and /collection/v1/publish."
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let jsonResponse = pm.response.json();",
							"",
							"//Verification",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"});",
							"//code name contains a string",
							"tests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");",
							"",
							"// pm.test(\"Content-Encoding header is present\", () => {",
							"//   pm.response.to.have.header(\"Content-Encoding\");",
							"// });",
							"// pm.test(\"Content-Encoding header is gzip\", () => {",
							"//   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('gzip');",
							"// });",
							"",
							"pm.test(\"Verify keys and data type of the params in positive scenario\", () => {",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.null;",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
							"});",
							"",
							"pm.test(\"params.status should be \\\"successful\\\"\", () => {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
							"});",
							"pm.test(\"responseCode should be OK\", () => {",
							"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Content Create",
					"item": [
						{
							"name": "400 - missing channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata channel not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata channel not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - empty channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata channel not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata channel not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - name: invalid datatype",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Metadata name should be a/an String value\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Metadata name should be a/an String value');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": 423432,\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - name empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - missing code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata code not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata code not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - missing mimeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata mimeType not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata mimeType not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - invalid mimeType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Metadata mimeType should be one of: [application/vnd.ekstep.ecml-archive, application/vnd.ekstep.html-archive, application/vnd.android.package-archive, application/vnd.ekstep.content-archive, application/vnd.ekstep.content-collection, application/vnd.ekstep.plugin-archive, application/vnd.ekstep.h5p-archive, application/epub, text/x-url, video/x-youtube, application/octet-stream, application/msword, application/pdf, image/jpeg, image/jpg, image/png, image/tiff, image/bmp, image/gif, image/svg+xml, video/avi, video/mpeg, video/quicktime, video/3gpp, video/mp4, video/ogg, video/webm, audio/mp3, audio/mp4, audio/mpeg, audio/ogg, audio/webm, audio/x-wav, audio/wav, application/json, application/quiz]\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Metadata mimeType should be one of: [application/vnd.ekstep.ecml-archive, application/vnd.ekstep.html-archive, application/vnd.android.package-archive, application/vnd.ekstep.content-archive, application/vnd.ekstep.content-collection, application/vnd.ekstep.plugin-archive, application/vnd.ekstep.h5p-archive, application/epub, text/x-url, video/x-youtube, application/octet-stream, application/msword, application/pdf, image/jpeg, image/jpg, image/png, image/tiff, image/bmp, image/gif, image/svg+xml, video/avi, video/mpeg, video/quicktime, video/3gpp, video/mp4, video/ogg, video/webm, audio/mp3, audio/mp4, audio/mpeg, audio/ogg, audio/webm, audio/x-wav, audio/wav, application/json, application/quiz]');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"some-mimeType\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - missing primaryCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"VALIDATION_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"VALIDATION_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"primaryCategory is a mandatory parameter\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"primaryCategory is a mandatory parameter\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should be empty\", () => {",
											"    pm.expect(jsonResponse.result).to.eql({});",
											"    pm.expect(jsonResponse.result).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - Invalid subject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors.\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"subject range data is empty from the given framework.\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('subject range data is empty from the given framework.');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12-erwe\",\n      \"subject\": [\"test\"],\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "404 - Invalid primaryCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.be.null;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"404\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"404\");",
											"});",
											"pm.test(`params.errmsg should be \\\"Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}\\\"`, () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(`Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}`);",
											"});",
											"",
											"// Result",
											"pm.test(\"messages should be null\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"aabaa\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"create"
									]
								},
								"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"id should be api.content.create\", () => {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
									"});",
									"pm.test(\"ver should be 4.0\", () => {",
									"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Content Read",
					"item": [
						{
							"name": "404 - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.be.null;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"id should be api.content.read\", () => {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
											"});",
											"pm.test(\"ver should be 4.0\", () => {",
											"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
											"});",
											"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");",
											"});",
											"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
											"});",
											"pm.test(`params.errmsg should be \\\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get('invalid_content_id')}\\\"`, () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get('invalid_content_id')}`);",
											"});",
											"",
											"// Result",
											"pm.test(\"messages should be null\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('invalid_content_id', 'do_42353245436534');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/api/content/v2/read/{{invalid_content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"read",
										"{{invalid_content_id}}"
									]
								},
								"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Content Update",
					"item": [
						{
							"name": "400 - Invalid versionKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string Bad Request\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Content-Encoding header should not present\", () => {",
											"  pm.response.to.not.have.header(\"Content-Encoding\");",
											"});",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.be.null;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be CLIENT_ERROR\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be CLIENT_ERROR\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.status should be failed\", () => {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Invalid version Key\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Invalid version Key\");",
											"});",
											"",
											"// Result",
											"pm.test(\"messages should be null\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set('invalid-versionKey', '3534534543');",
											"// pm.globals.set(\"content_id\", '');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{invalid-versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "400 - Empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
											"});",
											"",
											"// Result",
											"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
											"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"description\": \"dsd\",\n            \"name\": \"\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "404 - Invalid content id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.be.null;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be NOT_FOUND\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");",
											"});",
											"pm.test(`params.errmsg should be \\\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"invalid_content_id\")}\\\"`, () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"invalid_content_id\")}`);",
											"});",
											"",
											"// Result",
											"pm.test(\"messages should be null\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"invalid_content_id\", 'do_21357909972698726412211');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{invalid_content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{invalid_content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						},
						{
							"name": "404 - Invalid primaryCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json()",
											"",
											"//Verification",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404)",
											"});",
											"//code name contains a string",
											"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
											"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
											"  pm.expect(jsonResponse.result.messages).to.be.null;",
											"});",
											"",
											"//Validation",
											"// Response body",
											"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
											"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
											"});",
											"",
											"// Params",
											"pm.test(\"params.err should be \\\"404\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"404\");",
											"});",
											"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
											"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
											"});",
											"pm.test(`params.errmsg should be \\\"Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}\\\"`, () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(`Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}`);",
											"});",
											"",
											"pm.test(\"messages should be null\", () => {",
											"    pm.expect(jsonResponse.result.messages).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Channel-Id",
										"value": "{{channel_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/content/v2/update/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"content",
										"v2",
										"update",
										"{{content_id}}"
									]
								},
								"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// pm.globals.set(\"content_id\", '');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"id should be api.content.update\", () => {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
									"});",
									"pm.test(\"ver should be 4.0\", () => {",
									"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Content Reserve DIAL  code",
					"item": [
						{
							"name": "Reserve DIAL code with Invalid channel Id in header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response throws ERR_INVALID_CHANNEL\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_INVALID_CHANNEL\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "dummy"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 3,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reserve DIAL code with Zero count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response throws ERR_INVALID_COUNT_RANGE\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_INVALID_COUNT_RANGE\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 0,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reserve DIAL code with negative count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response throws ERR_INVALID_COUNT_RANGE\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_INVALID_COUNT_RANGE\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": -2,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reserve DIAL code with count greater than max limit(250)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response throws ERR_INVALID_COUNT_RANGE\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_INVALID_COUNT_RANGE\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 251,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reserve DIAL code with invalid collection Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response throws RESOURCE_NOT_FOUND\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"RESOURCE_NOT_FOUND\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"NOT_FOUND\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"dialcodes\": {\n            \"count\": 25,\n            \"qrCodeSpec\": {\n                \"errorCorrectionLevel\": \"H\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/reserve/do_dummy_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"reserve",
										"do_dummy_id"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Content/Collection Reserve DIAL code APIs allow you to reserve DIAL codes to a content/collection on the Sunbird platform. Reserve DAIL code API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Reserve DIAL code API(s) are /content/v2/dialcode/reserve and /collction/v1/dialcode/reserve."
				},
				{
					"name": "Content Link DIAL code",
					"item": [
						{
							"name": "Link DIAL code with invalid collection id in the URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response throws RESOURCE_NOT_FOUND\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"RESOURCE_NOT_FOUND\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"NOT_FOUND\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": [{\n            \"identifier\": [\"{{collection_id}}\"],\n            \"dialcode\": [\"{{new_dialcode}}\"]\n        }]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/link/do_dummy_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"link",
										"do_dummy_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Link DIAL code with invalid collection id in the request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response throws RESOURCE_NOT_FOUND\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"RESOURCE_NOT_FOUND\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_DIALCODE_LINK\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": [{\n            \"identifier\": [\"do_dummy_Id\"],\n            \"dialcode\": [\"{{new_dialcode}}\"]\n        }]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/link/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"link",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Link DIAL code with invalid DIAL code in the request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response throws RESOURCE_NOT_FOUND\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.responseCode).equals(\"RESOURCE_NOT_FOUND\")",
											"        ",
											"    const params = responseJson.params;",
											"    pm.expect(params.status).equals(\"failed\")",
											"    pm.expect(params.err).equals(\"ERR_DIALCODE_LINK\")   ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Channel-ID",
										"value": "{{channel_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}"
									},
									{
										"key": "x-authenticated-user-token",
										"value": "{{keycloak_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": [{\n            \"identifier\": [\"{{collection_id}}\"],\n            \"dialcode\": [\"DUMMY\"]\n        }]\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/api/collection/v1/dialcode/link/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collection",
										"v1",
										"dialcode",
										"link",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Content/Collection Link DIAL code APIs allow you to link DIAL codes to content/collection/collection units on the Sunbird platform. Reserve DAIL code API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Link DIAL code API(s) are /content/v2/dialcode/link and /collection/v1/dialcode/link"
				},
				{
					"name": "Content Publish API",
					"item": [
						{
							"name": "Pre-requisite",
							"item": [
								{
									"name": "Collection Create wo hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.environment.set(\"collection_id_wo_hierarchy\", jsonResponse.result.identifier);",
													"pm.globals.set(\"collection_id_wo_hierarchy\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Sample Collection\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.content-collection\",\n            \"primaryCategory\": \"Digital Textbook\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "PDF Content wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"pdf_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "MP4 Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"mp4_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "WEBM Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"webm_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/webm\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "HTML Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"html_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.html-archive\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "H5P Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"h5p_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "ECML Content Create invalid body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"ecml_content_id_invalid_body\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.ecml-archive\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"dummy\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "ECML Content Create wo body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"ecml_content_id_wo_body\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/vnd.ekstep.ecml-archive\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "EPUB Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"epub_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/epub\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "Youtube Content Create wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"yt_content_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/x-youtube\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								},
								{
									"name": "Plugin Create wo artifact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()",
													"",
													"//Verification",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200)",
													"});",
													"",
													"// Set global variable",
													"pm.globals.set(\"plugin_id_wo_artifact\", jsonResponse.result.identifier);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
											},
											{
												"key": "X-Authenticated-User-token",
												"value": "{{keycloak_access_token}}",
												"description": "Represents the authorized User ID to execute the API."
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
											},
											{
												"key": "X-Channel-Id",
												"value": "{{channel_id}}",
												"type": "text",
												"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"test-plugin\",\n            \"mimeType\": \"application/vnd.ekstep.plugin-archive\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"create"
											]
										},
										"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
									},
									"response": [
										{
											"name": "Content Create - 200 OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:42:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999995"
												},
												{
													"key": "request-time",
													"value": "34"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "36"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "40"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "41"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
										},
										{
											"name": "Content Create - 400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:28:26 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "297"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999998"
												},
												{
													"key": "request-time",
													"value": "11"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "13"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "18"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "125"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
										},
										{
											"name": "Content Create - 404 Not Found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"description": "Represents the authorized User ID to execute the API."
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text",
														"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/api/content/v2/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"content",
														"v2",
														"create"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Tue, 19 Jul 2022 06:33:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "X-RateLimit-Limit-hour",
													"value": "1000000"
												},
												{
													"key": "X-RateLimit-Remaining-hour",
													"value": "999997"
												},
												{
													"key": "request-time",
													"value": "16"
												},
												{
													"key": "x-envoy-upstream-service-time",
													"value": "18"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "X-Kong-Upstream-Latency",
													"value": "23"
												},
												{
													"key": "X-Kong-Proxy-Latency",
													"value": "115"
												},
												{
													"key": "Via",
													"value": "kong/0.14.1"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Test Cases",
							"item": [
								{
									"name": "Invalid Content ID Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/do_dummy_id",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"do_dummy_id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Collection ID Publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/collection/v1/publish/do_dummy_id",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"collection",
												"v1",
												"publish",
												"do_dummy_id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDF Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{pdf_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{pdf_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "MP4 Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{mp4_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{mp4_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WEBM Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{webm_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{webm_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HTML Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{html_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{html_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "H5P Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{h5p_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{h5p_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "EPUB Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{epub_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{epub_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Youtube Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{yt_content_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{yt_content_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Plugin Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{plugin_id_wo_artifact}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{plugin_id_wo_artifact}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Collection Publish without hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws ERR_COLLECTION_REVIEW\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"ERR_COLLECTION_REVIEW\")   ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 40000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/collection/v1/publish/{{collection_id_wo_hierarchy}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"collection",
												"v1",
												"publish",
												"{{collection_id_wo_hierarchy}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ECML Content Publish wo artifactUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"VALIDATOR_ERROR\")   ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{ecml_content_id_wo_body}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{ecml_content_id_wo_body}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ECML Content Publish invalid Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response throws CLIENT_ERROR\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.responseCode).equals(\"CLIENT_ERROR\")",
													"        ",
													"    const params = responseJson.params;",
													"    pm.expect(params.status).equals(\"failed\")",
													"    pm.expect(params.err).equals(\"INVALID_CONTENT_BODY\")   ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{kong_api_key}}",
												"type": "text"
											},
											{
												"key": "x-authenticated-user-token",
												"value": "{{keycloak_access_token}}",
												"type": "text"
											},
											{
												"key": "X-Channel-ID",
												"value": "{{channel_id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Testing\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/api/content/v2/publish/{{ecml_content_id_invalid_body}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"content",
												"v2",
												"publish",
												"{{ecml_content_id_invalid_body}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "The Content/Collection Publish APIs allow you to publish content/collection on the Sunbird platform. Publish API was previously available as part of learning-service which has now been refactored into content-service.\n\nThe URLs for Content Publish API(s) are /content/v2/publish and /collection/v1/publish."
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let jsonResponse = pm.response.json();",
							"",
							"//Verification",
							"// pm.test(\"Content-Encoding header should not present\", () => {",
							"//   pm.response.to.not.have.header(\"Content-Encoding\");",
							"// });",
							"",
							"pm.test(\"Verify keys and data type of the params in negative scenario\", () => {",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
							"});",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type header is present\", () => {",
					"  pm.response.to.have.header(\"Content-Type\");",
					"});",
					"pm.test(\"Content-Type header is application/json\", () => {",
					"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
					"});",
					"",
					"pm.test(\"Validate keys and data type of the response body\", () => {",
					"  let jsonResponse = pm.response.json();",
					"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
					"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
					"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
					"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
					"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
					"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
					"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
					"});"
				]
			}
		}
	]
}