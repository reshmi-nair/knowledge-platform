{
	"info": {
		"_postman_id": "95bee03d-d782-47da-89f9-cc70bb0a267e",
		"name": "Content V2",
		"description": "The Content Management APIs allow you to create, manage and process content on the Sunbird platform. Content is the basic building block of the Knowledge Service. Some examples would be Videos, Audio, Pdfs, Html, ECML etc. The basic operations for this API include Create, Update, Read, Review, Publish.\n\n*   Each of the endpoints serve a different purpose, so which one to use depends on what you want to do\n*   The operations include CRUD (Create, Update, Read and Delete) operations and other operations such as upload, publish, flag, link DIAL code, etc.\n*   The URL for Content Management API(s) is /content/v2.\n    \n\nFor more details refer [here](https://knowlg.sunbird.org/learn/readme)\n\nAPI tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1419050"
	},
	"item": [
		{
			"name": "Content Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponse = pm.response.json()",
							"",
							"//Verification",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"});",
							"pm.test(\"Content-Type header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Test data type of the response and keys\", () => {",
							"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
							"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.null;",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
							"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
							"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
							"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
							"});",
							"",
							"//Validation",
							"pm.test(\"id should be api.content.create\", function () {",
							"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
							"});",
							"pm.test(\"ver should be 4.0\", function () {",
							"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
							"});",
							"pm.test(\"params.status should be successful\", function () {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
							"});",
							"pm.test(\"responseCode should be OK\", function () {",
							"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
							"});",
							"",
							"// Set global variable",
							"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
							"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
					},
					{
						"key": "X-Authenticated-User-token",
						"value": "{{keycloak_access_token}}",
						"description": "Represents the authorized User ID to execute the API."
					},
					{
						"key": "Authorization",
						"value": "{{kong_api_key}}",
						"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
					},
					{
						"key": "X-Channel-Id",
						"value": "{{channel_id}}",
						"type": "text",
						"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{host}}/api/content/v2/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"content",
						"v2",
						"create"
					]
				},
				"description": "This API is associated with creating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
			},
			"response": [
				{
					"name": "Content Create - 200 OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:42:53 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999995"
						},
						{
							"key": "request-time",
							"value": "34"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "36"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "40"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "41"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:42:53ZZ\",\n    \"params\": {\n        \"resmsgid\": \"a06bcfc7-23b6-494a-8a63-bbdee8c6e373\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658212973248\"\n    }\n}"
				},
				{
					"name": "Content Create - 400 Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"create"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:28:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "297"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999998"
						},
						{
							"key": "request-time",
							"value": "11"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "13"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "18"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "125"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:28:26ZZ\",\n    \"params\": {\n        \"resmsgid\": \"7efe066b-39e0-4f03-a569-0e9f19e8822b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Validation Errors\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": [\n            \"Required Metadata name not set\"\n        ]\n    }\n}"
				},
				{
					"name": "Content Create - 404 Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"create"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:33:43 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999997"
						},
						{
							"key": "request-time",
							"value": "16"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "18"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "23"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "115"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:33:43ZZ\",\n    \"params\": {\n        \"resmsgid\": \"78745a2e-004b-4422-99e4-e2494387b3d4\",\n        \"msgid\": null,\n        \"err\": \"404\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Entry is not found in cassandra for content with identifier: obj-cat:abcd_content_all {}\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
				}
			]
		},
		{
			"name": "Content Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponse = pm.response.json()",
							"",
							"//Verification",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"//code name contains a string",
							"tests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");",
							"",
							"pm.test(\"Content-Type header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Test data type of the response and keys\", () => {",
							"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
							"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.null;",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
							"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys('content');",
							"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
							"  pm.expect(jsonResponse.result.content).to.have.any.keys('identifier', 'versionKey', 'code', 'channel', 'mimeType', 'createdOn', 'primaryCategory', 'contentDisposition', 'contentEncoding', 'objectType', 'visibility', 'discussionForum', 'license', 'version', 'compatibilityLevel', 'name', 'status');",
							"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.content.versionKey).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.content.version).to.be.a(\"number\");",
							"  pm.expect(jsonResponse.result.content.channel).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.a(\"number\");",
							"  pm.expect(jsonResponse.result.content.ownershipType).to.be.an(\"array\");",
							"});",
							"",
							"//Validation",
							"pm.test(\"id should be api.content.read\", function () {",
							"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
							"});",
							"pm.test(\"ver should be 4.0\", () => {",
							"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
							"});",
							"pm.test(\"params.status should be successful\", () => {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
							"});",
							"pm.test(\"responseCode should be OK\", () => {",
							"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
							"});",
							"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), () => {",
							"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.globals.get(\"content_id\"));",
							"});",
							"pm.test(\"objectType should be Content\", () => {",
							"    pm.expect(jsonResponse.result.content.objectType).to.eql(\"Content\");",
							"});",
							"pm.test(\"visibility should be Default\", () => {",
							"    pm.expect(jsonResponse.result.content.visibility).to.eql(\"Default\");",
							"});",
							"pm.test(\"compatibilityLevel should be 1\", () => {",
							"    pm.expect(jsonResponse.result.content.compatibilityLevel).to.eql(1);",
							"});",
							"pm.test(\"status should be Draft\", () => {",
							"    pm.expect(jsonResponse.result.content.status).to.eql(\"Draft\");",
							"});",
							"",
							"pm.globals.set(\"versionKey\", jsonResponse.result.content.versionKey);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.globals.set('content_id', 'do_213584064677732352111');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
					},
					{
						"key": "X-Authenticated-User-token",
						"value": "{{keycloak_access_token}}",
						"type": "text",
						"description": "Represents the authorized User ID to execute the API."
					},
					{
						"key": "Authorization",
						"value": "{{kong_api_key}}",
						"type": "text",
						"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
					}
				],
				"url": {
					"raw": "{{host}}/api/content/v2/read/{{content_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"content",
						"v2",
						"read",
						"{{content_id}}"
					]
				},
				"description": "This API is associated with viewing and reading out the content on the Sunbird Platform. You need to provide a valid content Id value in {{content_id}} field of API URL."
			},
			"response": [
				{
					"name": "Content Read - 200 OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							}
						],
						"url": {
							"raw": "{{host}}/api/content/v2/read/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"read",
								"{{content_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:44:16 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999996"
						},
						{
							"key": "request-time",
							"value": "26"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "28"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "32"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "14"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.read\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:44:16ZZ\",\n    \"params\": {\n        \"resmsgid\": \"2c23c136-d4eb-4c88-897b-7077bd2894cd\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"content\": {\n            \"ownershipType\": [\n                \"createdBy\"\n            ],\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"interceptionPoints\": {},\n            \"credentials\": {\n                \"enabled\": \"No\"\n            },\n            \"channel\": \"channel_id\",\n            \"language\": [\n                \"English\"\n            ],\n            \"mimeType\": \"application/pdf\",\n            \"idealScreenSize\": \"normal\",\n            \"createdOn\": \"2022-07-19T06:42:53.248+0000\",\n            \"objectType\": \"Content\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"contentDisposition\": \"inline\",\n            \"lastUpdatedOn\": \"2022-07-19T06:42:53.248+0000\",\n            \"contentEncoding\": \"identity\",\n            \"contentType\": \"ClassroomTeachingVideo\",\n            \"dialcodeRequired\": \"No\",\n            \"identifier\": \"do_21358408067678208014\",\n            \"lastStatusChangedOn\": \"2022-07-19T06:42:53.248+0000\",\n            \"audience\": [\n                \"Student\"\n            ],\n            \"os\": [\n                \"All\"\n            ],\n            \"visibility\": \"Default\",\n            \"consumerId\": \"ab35de9d-2a45-410a-901f-82a25e05af6d\",\n            \"discussionForum\": {\n                \"enabled\": \"No\"\n            },\n            \"mediaType\": \"content\",\n            \"osId\": \"org.ekstep.quiz.app\",\n            \"languageCode\": [\n                \"en\"\n            ],\n            \"version\": 2,\n            \"versionKey\": \"1658212973248\",\n            \"license\": \"CC BY 4.0\",\n            \"idealScreenDensity\": \"hdpi\",\n            \"framework\": \"NCF\",\n            \"compatibilityLevel\": 1,\n            \"name\": \"Untitled Content\",\n            \"status\": \"Draft\"\n        }\n    }\n}"
				},
				{
					"name": "Content Read - 404 Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							}
						],
						"url": {
							"raw": "{{host}}/api/content/v2/read/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"read",
								"{{content_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:36:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999997"
						},
						{
							"key": "request-time",
							"value": "59"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "61"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "74"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "116"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.read\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:36:38ZZ\",\n    \"params\": {\n        \"resmsgid\": \"e8f48807-bff1-45c0-8eeb-760dcf7f98cf\",\n        \"msgid\": null,\n        \"err\": \"NOT_FOUND\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213584064677732352111\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
				}
			]
		},
		{
			"name": "Content Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponse = pm.response.json()",
							"",
							"//Verification",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"});",
							"pm.test(\"Content-Type header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Test data type of the response and keys\", () => {",
							"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
							"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.null;",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
							"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
							"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
							"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
							"});",
							"",
							"//Validation",
							"pm.test(\"id should be api.content.update\", function () {",
							"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
							"});",
							"pm.test(\"ver should be 4.0\", function () {",
							"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
							"});",
							"pm.test(\"params.status should be successful\", function () {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
							"});",
							"pm.test(\"responseCode should be OK\", function () {",
							"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
							"});",
							"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), function () {",
							"    pm.expect(jsonResponse.result.identifier).to.eql(pm.globals.get(\"content_id\"));",
							"});",
							"pm.test(\"node_id should be equal to \" + pm.globals.get(\"content_id\"), function () {",
							"    pm.expect(jsonResponse.result.node_id).to.eql(pm.globals.get(\"content_id\"));",
							"});",
							"",
							"// Set global variable",
							"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.globals.set('versionKey', '3534534543');",
							"// pm.globals.set(\"content_id\", 'do_213584064677732352111');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
					},
					{
						"key": "X-Authenticated-User-token",
						"value": "{{keycloak_access_token}}",
						"type": "text",
						"description": "Represents the authorized User ID to execute the API."
					},
					{
						"key": "Authorization",
						"value": "{{kong_api_key}}",
						"type": "text",
						"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
					},
					{
						"key": "X-Channel-Id",
						"value": "{{channel_id}}",
						"type": "text",
						"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{host}}/api/content/v2/update/{{content_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"content",
						"v2",
						"update",
						"{{content_id}}"
					]
				},
				"description": "This API is associated with updating content on the Sunbird Platform. Mandatory fields (name, code, mimeType and primaryCategory) cannot be null or empty.\n\nThe body refers to the format of the request.\n\n*   The body contains metadata about the content to be updated.\n*   Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)"
			},
			"response": [
				{
					"name": "Content Update - 200 OK",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/update/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"update",
								"{{content_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:44:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999995"
						},
						{
							"key": "request-time",
							"value": "87"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "88"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "92"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "115"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.update\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:44:37ZZ\",\n    \"params\": {\n        \"resmsgid\": \"767eada1-6342-4503-ad0d-b18aea711aab\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"identifier\": \"do_21358408067678208014\",\n        \"node_id\": \"do_21358408067678208014\",\n        \"versionKey\": \"1658213077381\"\n    }\n}"
				},
				{
					"name": "Content Update - 400 Bad Request",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/update/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"update",
								"{{content_id}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:38:11 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "269"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999997"
						},
						{
							"key": "request-time",
							"value": "33"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "35"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "38"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "12"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.update\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:38:11ZZ\",\n    \"params\": {\n        \"resmsgid\": \"0237c6eb-9d37-474f-aed5-c83aee24116b\",\n        \"msgid\": null,\n        \"err\": \"CLIENT_ERROR\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Invalid version Key\"\n    },\n    \"responseCode\": \"CLIENT_ERROR\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
				},
				{
					"name": "Content Update - 404 Not Found",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "The Content Type entity is the media type of the resource.Possible media types can be application/json."
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text",
								"description": "Represents the authorized User ID to execute the API."
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text",
								"description": "To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here."
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text",
								"description": "Represents a physical location (e.g: state) uniquely to which the user belongs."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/content/v2/update/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"content",
								"v2",
								"update",
								"{{content_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 19 Jul 2022 06:39:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit-hour",
							"value": "1000000"
						},
						{
							"key": "X-RateLimit-Remaining-hour",
							"value": "999996"
						},
						{
							"key": "request-time",
							"value": "12"
						},
						{
							"key": "x-envoy-upstream-service-time",
							"value": "14"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-Kong-Upstream-Latency",
							"value": "18"
						},
						{
							"key": "X-Kong-Proxy-Latency",
							"value": "116"
						},
						{
							"key": "Via",
							"value": "kong/0.14.1"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"api.content.update\",\n    \"ver\": \"4.0\",\n    \"ts\": \"2022-07-19T06:39:22ZZ\",\n    \"params\": {\n        \"resmsgid\": \"e60a2a4d-c8f9-4f10-bc66-695e0f86d82c\",\n        \"msgid\": null,\n        \"err\": \"NOT_FOUND\",\n        \"status\": \"failed\",\n        \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213584064677732352111\"\n    },\n    \"responseCode\": \"RESOURCE_NOT_FOUND\",\n    \"result\": {\n        \"messages\": null\n    }\n}"
				}
			]
		}
	]
}